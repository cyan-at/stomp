##################################################################
something is wrong with DH params

def get_fast_a_matrix(self, theta):
    sth_ = math.sin(theta)
    cth_ = math.cos(theta)

    self.fast_a_matrix[0, 0] = cth_
    self.fast_a_matrix[0, 1] = -sth_ * self.calpha_

    self.fast_a_matrix[0, 2] = sth_ * self.salpha_
    self.fast_a_matrix[0, 3] = self.r * cth_

    self.fast_a_matrix[1, 0] = sth_
    self.fast_a_matrix[1, 1] = cth_ * self.calpha_

    self.fast_a_matrix[1, 2] = -cth_ * self.salpha_
    self.fast_a_matrix[1, 3] = self.r * sth_

    self.fast_a_matrix[2, 1] = self.salpha_
    self.fast_a_matrix[2, 2] = self.calpha_
    self.fast_a_matrix[2, 3] = self.d
    return self.fast_a_matrix

vs

void JointRot::CalcFK(void) {
  th_ = q()(0);

  sth_ = sin(th_);
  cth_ = cos(th_);

  g_joint_link_(0, 0) = cth_;
  g_joint_link_(0, 1) = -sth_;
  g_joint_link_(1, 0) = sth_;
  g_joint_link_(1, 1) = cth_;
}

event dispatch, and the idea of a thing having instructions of how to use it as well as what happens next
is like a kind of advanced memento design pattern. the memento is what is passed around, and the memento induces how it is
consumed as well as what to memento next. some more interesting relationship there

##################################################################
state cost audit

Stomp2DTest::execute
  calls
  Stomp2DTest::evaluateCostPathWithGradients
  on semantically a 2D line
    from (px, py) -> (parameters x, y)
    (parameters x, y) -> ...
    initialized at px, py = 0.01
    (assuming 0.0 -> 0.99 initial trajectory)
    TODO(jim) REWRITE THIS TO SCALE TO ARBITRARY START/ENDs

  for a given 2D line segment from (x1, y1) -> (x2, y2)
  discretize it by euclidean dist / resolution to num_samples
  and sample the 2D grid space uniformly at that resolution
  along that 2D line path
  for a given sample
    calls
    evaluateCostWithGradients
      calls evaluateMapCost
        1.0 cost for inadmissible obstacles

        or (normalized dist) to radius (meaning 0 - 1 range)
        for admissible heuristics

      returns
        double cost = evaluateMapCost(x, y) * movement_dt_;
        double vel_mag = sqrt(vx*vx + vy*vy);
        return cost*vel_mag;


      note cost is sum of
      mapCost (0-1) * movement_dt_ * vel_mag
      mapCost (0-1) * displacement

      and the total cost is averaged across num_samples
      normalized across displacement / sample
      
      #important normalized across (x1, y1) -> (x2, y2)
      line distance


